# Stack
It is a linear data structure that follows a particular order in which the operations are performed.

# LIFO( Last In First Out ):

    This strategy states that the element that is inserted last will come out first. You can take a pile of plates kept on top of each other as a real-life example. The plate which we put last is on the top and since we remove the plate that is at the top, we can say that the plate that was put last comes out first.

# Basic Operations on Stack
    In order to make manipulations in a stack, there are certain operations provided to us.

    - push() to insert an element into the stack
        Adds an item to the stack. If the stack is full, then it is said to be an Overflow condition.
    - pop() to remove an element from the stack
        If the stack is empty, then it is said to be an Underflow condition.
    top() Returns the top element of the stack.
    isEmpty() returns true is stack is empty else false
    size() returns the size of stack

# There are many real-life examples of a stack. Consider the simple example of plates stacked over one another in a canteen. The plate which is at the top is the first one to be removed, i.e. the plate which has been placed at the bottommost position remains in the stack for the longest period of time. So, it can be simply seen to follow the LIFO/FILO order.

# Complexity Analysis:
        Time Complexity
        Operations  	Complexity
        push() 	O(1)
        pop()   	O(1)
        isEmpty() 	O(1)
        size()	O(1)

# Types of Stacks:
  Register Stack: This type of stack is also a memory element present in the memory unit and can handle a small amount of data only. The height of the register stack is always limited as the size of the register stack is very small compared to the memory.
  Memory Stack: This type of stack can handle a large amount of memory data. The height of the memory stack is flexible as it occupies a large amount of memory data.

# Implementation of Stack:
    There are two ways to implement a stack

    - Using array
        * Advantages of array implementation:
            - Easy to implement.
            - Memory is saved as pointers are not involved.
        * Disadvantages of array implementation:
            - It is not dynamic.
            - It doesnâ€™t grow and shrink depending on needs at runtime.

    - Using linked list
        * Advantages of Linked List implementation:
            - The linked list implementation of a stack can grow and shrink according to the needs at runtime.
            - It is used in many virtual machines like JVM.
            - Stacks are more secure and reliable as they do not get corrupted easily.
            - Stack cleans up the objects automatically.
        * Disadvantages of Linked List implementation:
            - Requires extra memory due to the involvement of pointers.
            - Random accessing is not possible in stack.
            - The total size of the stack must be defined before.
            - If the stack falls outside the memory it can lead to abnormal termination.